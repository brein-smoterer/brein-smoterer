@page "/characters/{CharacterName}";
@using Genshin_Site.Data;
@inject NavigationManager NavManager
@inject CharactersService characterService;
@inject WeaponService weaponService;
@inject ArtifactsService artifactService;

@{
    Character character = GetCharacter(CharacterName);
    <div @onclick="() => ShowCharDetails(character)">
        <CharacterComponent Character=@character />
    </div>
    <div hidden="@(!character.Show)">
        <div>@character.Element</div>
        <div @onclick="() => NavigateToWeapons(character)">@character.Weapon</div>
    </div>
    <div>
        <hr>
        @if (character.Builds != null)
        {
            @foreach (Build build in character.Builds)
            {
                <div class="build-name" @onclick="() => ShowBuild(build)">@build.Name</div>
                <div class="build" hidden="@(!build.Shown)">
                    <div class="column">
                        <h4>Weapons</h4>
                        @foreach (var weaponName in build.Weapons)
                        {
                            Weapon weapon = GetWeapon(weaponName);
                            <WeaponsComponent Weapon=@weapon />
                        }
                    </div>
                    <div class="column">
                        <h4>Artifacts</h4>
                        @foreach (var artifacts in build.ArtifactSets)
                        {
                            <ArtifactSetComponent ArtifactSet=@GetArtifactSet(artifacts)></ArtifactSetComponent>
                        }
                    </div>
                    <div class="column">
                        <h4>Stats</h4>
                        @foreach (var stats in build.Stats)
                        {
                            <div>@stats</div>
                        }
                    </div>
                </div>

            }
        }
    </div>
}
@code {
    [Parameter]
    public string CharacterName { get; set; }

    public Character GetCharacter(string name)
    {
        Character needed = new Character(
            "",
            "",
            "",
            false,
            "",
            new List<Build>()
                {
                    new Build(
                        "",
                        new List<string>
                        {
                            "",
                        },
                        new List<string>
                        {
                            "",
                        },
                        new List<string>
                        {
                            "",
                        }
                    )
                });
        List<Character> characters = characterService.Get();
        foreach (var character in characters)
        {
            if (character.CharacterName == name)
            {
                needed = character;
            }
        }
        return needed;
    }
    public Weapon GetWeapon(string name)
    {
        Weapon needed = new Weapon("", "", "", "", "");
        List<Weapon> weapons = weaponService.Get();
        foreach (var weapon in weapons)
        {
            if (weapon.Name == name)
            {
                needed = weapon;
            }
        }
        return needed;
    }
    public ArtifactSet GetArtifactSet(string name)
    {
        ArtifactSet neededSet = new ArtifactSet("", "", new Artifacts[0], "", false);
        List<ArtifactSet> artifactSets = artifactService.GetSets();
        foreach (var artifactSet in artifactSets)
        {
            if (artifactSet.Name == name)
            {
                neededSet = artifactSet;
            }
        }
        return neededSet;
    }
    public void ShowBuild(Build build)
    {
        build.Shown = !build.Shown;
    }
    public void ShowCharDetails(Character character)
    {
        character.Show = !character.Show;
    }
    public void NavigateToWeapons(Character character)
    => NavManager.NavigateTo("/weapons/" + character.Weapon);

}
